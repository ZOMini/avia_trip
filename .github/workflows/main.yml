name: Avia_trip workflow

on: [push]

# env:
#   SECRET_KEY: ${{ secrets.SECRET_KEY }}
#   DB_ENGINE: ${{ secrets.DB_ENGINE }}
#   DB_NAME: ${{ secrets.DB_NAME }}
#   POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
#   POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#   DB_HOST: ${{ secrets.DB_HOST }}
#   DB_PORT: ${{ secrets.DB_PORT }}

jobs:
  # django-unit_tests:

  #   runs-on: ubuntu-latest

  #   services:
  #     postgres:
  #       image: postgres:latest
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: github_actions
  #       ports:
  #         - 5432:5432
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up Python 3.9
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.9
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r avia/requirements.txt
  #   - name: Run migrations
  #     run: python avia/manage.py migrate
  #   - name: Run tests
  #     run: python avia/manage.py test api

  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          source: "docker-compose.yaml, default.conf"
          target: "~/avia"
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
              cd avia
              rm .env
              touch .env
              echo DEBUG=True >> .env
              echo DB_ENGINE=django.db.backends.postgresql >> .env
              echo DB_NAME=postgres >> .env
              echo POSTGRES_USER=postgres >> .env
              echo POSTGRES_PASSWORD=postgres >> .env
              echo DB_HOST=db >> .env
              echo DB_PORT=5432 >> .env
              echo HOST=${{ secrets.HOST }} >> .env
              sudo docker-compose stop
              sudo docker-compose rm -f web
              sudo docker-compose pull web
              sudo docker-compose up -d --build
